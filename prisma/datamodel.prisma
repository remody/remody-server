type User {
	id: ID! @id
	name: String!
	email: String! @unique
	password: String!
	updatedAt: DateTime! @updatedAt
	createdAt: DateTime! @createdAt
	Files: [File!]! @relation(name: "FileToUser", onDelete: CASCADE)
	UserSchemas: [UserSchema!]!
		@relation(name: "UserSchemaToUser", onDelete: CASCADE)
	Papers: [Paper!]! @relation(name: "PaperToUser", onDelete: CASCADE)
}

type File {
	id: ID! @id
	filename: String!
	mimetype: String!
	encoding: String!
	path: String! @unique
	updatedAt: DateTime! @updatedAt
	createdAt: DateTime! @createdAt
	owner: User! @relation(name: "FileToUser", onDelete: SET_NULL)
}

type AuthAccessCode {
	id: ID! @id
	updatedAt: DateTime! @updatedAt
	createdAt: DateTime! @createdAt
	user: User! @relation(name: "AuthAccessCodeToUser", onDelete: SET_NULL)
}

type UserSchema {
	id: ID! @id
	user: User! @relation(name: "UserSchemaToUser", onDelete: SET_NULL)
	name: String!
	updatedAt: DateTime! @updatedAt
	createdAt: DateTime! @createdAt
	rowCount: Int @default(value: 1)
	created: Boolean! @default(value: false)
	columns: [Column!]! @relation(name: "UserSchemaToColumn", onDelete: CASCADE)
}

type Paper {
	id: ID! @id
	owner: User! @relation(name: "PaperToUser", onDelete: SET_NULL)
	title: String!
	author: String!
	belong: String!
	publishedyear: Int!
	url: String!
}

enum ColumnType {
	VARCHAR
	DATETIME
	Int
}

type Column {
	id: ID! @id
	name: String!
	type: ColumnType!
	length: Int
}
