type Query {
	users(query: String): [User!]!
	me(token: String): User!
	files(token: String!): [File!]!
	userSchemas: [UserSchema!]!
	pythonExample: Boolean
	mysqlConnection: Boolean
	elasticSearchConnection: Boolean
	UserSchemaInfo(schemaId: String!): SchemaInfo!
	papers(first: Int, after: String, queryString: String): [Paper!]!
}

type Mutation {
	createUser(data: CreateUserInput!): AuthPayload!
	login(data: LoginUserInput!): AuthPayload!
	deleteUser(id: ID!): User!
	updateUser(id: ID!, data: UpdateUserInput!): User!
	singleUpload(file: Upload!): File!
	multipleUpload(files: [Upload!]!): [File!]!
	createAuthAccessCode(email: String!): Boolean!
	changeUserPassword(data: changeUserPasswordInput!): User!
	createTable(data: CreateTableInput!): UserSchema!
	UpdateUserSchemaInfo(data: UpdateSchemaInput!): SchemaInfo!
	uploadForSearch(data: uploadForSearchInput!): Boolean
}

scalar Upload
scalar Object

input uploadForSearchInput {
	title: String!
	author: String!
	belong: String!
	publishedyear: Int!
	file: Upload!
}

type AuthPayload {
	token: String!
	user: User!
}

input CreateUserInput {
	name: String!
	email: String!
	password: String!
}

input LoginUserInput {
	email: String!
	password: String!
}

input UpdateUserInput {
	name: String
	email: String
}

input changeUserPasswordInput {
	accessCode: String!
	email: String!
	password: String!
}

input UpdateSchemaInput {
	schemaId: String!
	updateRows: [Object!]!
	deleteRows: [Int!]!
	createRows: [Int!]!
}

enum RowType {
	VARCHAR
	DATETIME
	Int
}

input CreateTableInput {
	name: String!
	rows: [Row!]!
}

input Row {
	name: String!
	type: RowType!
	length: Int
}

type SchemaInfo {
	fields: [String!]!
	rows: [Object!]!
	nextId: Int!
}

type User {
	id: ID!
	name: String!
	email: String!
	password: String!
	Files: [File!]!
	UserSchemas: [UserSchema!]!
}

type File {
	id: ID!
	filename: String!
	mimetype: String!
	encoding: String!
	path: String!
	owner: User!
}

type AuthAccessCode {
	id: ID!
	user: User!
}

type UserSchema {
	id: ID!
	user: User!
	name: String!
	rowCount: Int
	created: Boolean!
	columns: [Column!]!
}

enum ColumnType {
	VARCHAR
	DATETIME
	Int
}

type Column {
	id: ID!
	name: String!
	type: ColumnType!
	length: Int
}

type Paper {
	id: ID!
	owner: User!
	title: String!
	author: String!
	belong: String!
	publishedyear: Int!
	url: String!
}

enum MutationType {
	CREATED
	UPDATED
	DELETED
}

type Subscription {
	UserSchema: UserSchemaSubscriptionPayload!
}

type UserSchemaSubscriptionPayload {
	mutation: MutationType!
	node: UserSchema
}
