# source: https://us1.prisma.sh/kyungminlee-5dfb92/remody-server/dev
# timestamp: Fri Mar 08 2019 17:34:40 GMT+0900 (GMT+09:00)

type AggregateInterpretedData {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type InterpretedData implements Node {
  id: ID!
  name: String!
  url: String!
  description: String!
  owner: User!
}

"""A connection to a list of items."""
type InterpretedDataConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InterpretedDataEdge]!
  aggregate: AggregateInterpretedData!
}

input InterpretedDataCreateInput {
  name: String!
  url: String!
  description: String!
  owner: UserCreateOneWithoutInterpretedDatasInput!
}

input InterpretedDataCreateManyWithoutOwnerInput {
  create: [InterpretedDataCreateWithoutOwnerInput!]
  connect: [InterpretedDataWhereUniqueInput!]
}

input InterpretedDataCreateWithoutOwnerInput {
  name: String!
  url: String!
  description: String!
}

"""An edge in a connection."""
type InterpretedDataEdge {
  """The item at the end of the edge."""
  node: InterpretedData!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InterpretedDataOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  url_ASC
  url_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type InterpretedDataPreviousValues {
  id: ID!
  name: String!
  url: String!
  description: String!
}

input InterpretedDataScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [InterpretedDataScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [InterpretedDataScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InterpretedDataScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type InterpretedDataSubscriptionPayload {
  mutation: MutationType!
  node: InterpretedData
  updatedFields: [String!]
  previousValues: InterpretedDataPreviousValues
}

input InterpretedDataSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InterpretedDataSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InterpretedDataSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InterpretedDataSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InterpretedDataWhereInput
}

input InterpretedDataUpdateInput {
  name: String
  url: String
  description: String
  owner: UserUpdateOneRequiredWithoutInterpretedDatasInput
}

input InterpretedDataUpdateManyDataInput {
  name: String
  url: String
  description: String
}

input InterpretedDataUpdateManyMutationInput {
  name: String
  url: String
  description: String
}

input InterpretedDataUpdateManyWithoutOwnerInput {
  create: [InterpretedDataCreateWithoutOwnerInput!]
  connect: [InterpretedDataWhereUniqueInput!]
  set: [InterpretedDataWhereUniqueInput!]
  disconnect: [InterpretedDataWhereUniqueInput!]
  delete: [InterpretedDataWhereUniqueInput!]
  update: [InterpretedDataUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [InterpretedDataUpdateManyWithWhereNestedInput!]
  deleteMany: [InterpretedDataScalarWhereInput!]
  upsert: [InterpretedDataUpsertWithWhereUniqueWithoutOwnerInput!]
}

input InterpretedDataUpdateManyWithWhereNestedInput {
  where: InterpretedDataScalarWhereInput!
  data: InterpretedDataUpdateManyDataInput!
}

input InterpretedDataUpdateWithoutOwnerDataInput {
  name: String
  url: String
  description: String
}

input InterpretedDataUpdateWithWhereUniqueWithoutOwnerInput {
  where: InterpretedDataWhereUniqueInput!
  data: InterpretedDataUpdateWithoutOwnerDataInput!
}

input InterpretedDataUpsertWithWhereUniqueWithoutOwnerInput {
  where: InterpretedDataWhereUniqueInput!
  update: InterpretedDataUpdateWithoutOwnerDataInput!
  create: InterpretedDataCreateWithoutOwnerInput!
}

input InterpretedDataWhereInput {
  """Logical AND on all given filters."""
  AND: [InterpretedDataWhereInput!]

  """Logical OR on all given filters."""
  OR: [InterpretedDataWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InterpretedDataWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  owner: UserWhereInput
}

input InterpretedDataWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createInterpretedData(data: InterpretedDataCreateInput!): InterpretedData!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateInterpretedData(data: InterpretedDataUpdateInput!, where: InterpretedDataWhereUniqueInput!): InterpretedData
  deleteUser(where: UserWhereUniqueInput!): User
  deleteInterpretedData(where: InterpretedDataWhereUniqueInput!): InterpretedData
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertInterpretedData(where: InterpretedDataWhereUniqueInput!, create: InterpretedDataCreateInput!, update: InterpretedDataUpdateInput!): InterpretedData!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyInterpretedDatas(data: InterpretedDataUpdateManyMutationInput!, where: InterpretedDataWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyInterpretedDatas(where: InterpretedDataWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  interpretedDatas(where: InterpretedDataWhereInput, orderBy: InterpretedDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InterpretedData]!
  user(where: UserWhereUniqueInput!): User
  interpretedData(where: InterpretedDataWhereUniqueInput!): InterpretedData
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  interpretedDatasConnection(where: InterpretedDataWhereInput, orderBy: InterpretedDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InterpretedDataConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  interpretedData(where: InterpretedDataSubscriptionWhereInput): InterpretedDataSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  interpretedDatas(where: InterpretedDataWhereInput, orderBy: InterpretedDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InterpretedData!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  interpretedDatas: InterpretedDataCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutInterpretedDatasInput {
  create: UserCreateWithoutInterpretedDatasInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutInterpretedDatasInput {
  name: String!
  email: String!
  password: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  interpretedDatas: InterpretedDataUpdateManyWithoutOwnerInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutInterpretedDatasInput {
  create: UserCreateWithoutInterpretedDatasInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutInterpretedDatasDataInput
  upsert: UserUpsertWithoutInterpretedDatasInput
}

input UserUpdateWithoutInterpretedDatasDataInput {
  name: String
  email: String
  password: String
}

input UserUpsertWithoutInterpretedDatasInput {
  update: UserUpdateWithoutInterpretedDatasDataInput!
  create: UserCreateWithoutInterpretedDatasInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  interpretedDatas_every: InterpretedDataWhereInput
  interpretedDatas_some: InterpretedDataWhereInput
  interpretedDatas_none: InterpretedDataWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
