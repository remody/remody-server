type Query {
	users(query: String): [User!]!
	me(token: String): User!
	files(token: String!): [File!]!
	accessCode(code: String!): User!
}

type Mutation {
	createUser(data: CreateUserInput!): AuthPayload!
	login(data: LoginUserInput!): AuthPayload!
	deleteUser(id: ID!): User!
	updateUser(id: ID!, data: UpdateUserInput!): User!
	singleUpload(file: Upload!): File!
	multipleUpload(files: [Upload!]!): [File!]!
	createAuthAccessCode(email: String!): AuthAccessCode!
}

scalar Upload

type AuthPayload {
	token: String!
	user: User!
}

input CreateUserInput {
	name: String!
	email: String!
	password: String!
}

input LoginUserInput {
	email: String!
	password: String!
}

input UpdateUserInput {
	name: String
	email: String
}

enum MutationType {
	CREATED
	UPDATED
	DELETED
}

type Subscription {
	InterpretedData: InterpretedDataSubscriptionPayload!
}

type InterpretedDataSubscriptionPayload {
	mutation: MutationType!
	node: InterpretedData
}

type User {
	id: ID!
	name: String!
	email: String!
	password: String!
	Files: [File!]!
	interpretedDatas: [InterpretedData!]!
}

type InterpretedData {
	id: ID!
	name: String!
	url: String!
	description: String!
	owner: User!
}

type File {
	id: ID!
	filename: String!
	mimetype: String!
	encoding: String!
	path: String!
	owner: User!
}

type AuthAccessCode {
	id: ID!
	user: User!
}
